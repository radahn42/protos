syntax = "proto3";

package auth;

option go_package = "radahn.sso.v1;ssov1";

import "buf/validate/validate.proto";

service Auth {
  rpc Register (RegisterRequest) returns (RegisterResponse);
  rpc Login (LoginRequest) returns (LoginResponse);

  rpc AssignRoleToUser (AssignRoleToUserRequest) returns (AssignRoleToUserResponse);
  rpc RevokeRoleFromUser (RevokeRoleFromUserRequest) returns (RevokeRoleFromUserResponse);
  rpc HasPermission (HasPermissionRequest) returns (HasPermissionResponse);
  rpc GetUserRoles (GetUserRolesRequest) returns (GetUserRolesResponse);
  rpc GetAllRoles (GetAllRolesRequest) returns (GetAllRolesResponse);
  rpc CreateRole (CreateRoleRequest) returns (CreateRoleResponse);
  rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse);
  rpc AddPermissionToRole (AddPermissionToRoleRequest) returns (AddPermissionToRoleResponse);
  rpc RemovePermissionFromRole (RemovePermissionFromRoleRequest) returns (RemovePermissionFromRoleResponse);

  rpc RequestPasswordReset (RequestPasswordResetRequest) returns (RequestPasswordResetResponse);
  rpc ConfirmPasswordReset (ConfirmPasswordResetRequest) returns (ConfirmPasswordResetResponse);
  rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse);

  rpc Logout (LogoutRequest) returns (LogoutResponse);

  rpc ValidateToken (ValidateTokenRequest) returns (ValidateTokenResponse);
}

message RegisterRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
  string password = 2 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
}

message RegisterResponse {
  int64 user_id = 1;
}

message LoginRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
  string password = 2 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
  int32 app_id = 3 [
    (buf.validate.field).int32.gt = 0
  ];
}

message LoginResponse {
  string token = 1 [
    (buf.validate.field).string.min_len = 1
  ];
}

// Новые сообщения для управления ролями и разрешениями
message AssignRoleToUserRequest {
  int64 user_id = 1 [(buf.validate.field).int64.gt = 0];
  string role_name = 2 [(buf.validate.field).string.min_len = 1];
}

message AssignRoleToUserResponse {
  bool success = 1;
}

message RevokeRoleFromUserRequest {
  int64 user_id = 1 [(buf.validate.field).int64.gt = 0];
  string role_name = 2 [(buf.validate.field).string.min_len = 1];
}

message RevokeRoleFromUserResponse {
  bool success = 1;
}

message HasPermissionRequest {
  int64 user_id = 1 [(buf.validate.field).int64.gt = 0];
  string permission_name = 2 [(buf.validate.field).string.min_len = 1];
}

message HasPermissionResponse {
  bool has_permission = 1;
}

message GetUserRolesRequest {
  int64 user_id = 1 [(buf.validate.field).int64.gt = 0];
}

message GetUserRolesResponse {
  repeated string role_names = 1;
}

message GetAllRolesRequest {}

message GetAllRolesResponse {
  repeated string role_names = 1;
}

message CreateRoleRequest {
  string role_name = 1 [(buf.validate.field).string.min_len = 1];
}

message CreateRoleResponse {
  int64 role_id = 1;
}

message DeleteRoleRequest {
  string role_name = 1 [(buf.validate.field).string.min_len = 1];
}

message DeleteRoleResponse {
  bool success = 1;
}

message AddPermissionToRoleRequest {
  string role_name = 1 [(buf.validate.field).string.min_len = 1];
  string permission_name = 2 [(buf.validate.field).string.min_len = 1];
}

message AddPermissionToRoleResponse {
  bool success = 1;
}

message RemovePermissionFromRoleRequest {
  string role_name = 1 [(buf.validate.field).string.min_len = 1];
  string permission_name = 2 [(buf.validate.field).string.min_len = 1];
}

message RemovePermissionFromRoleResponse {
  bool success = 1;
}

message RequestPasswordResetRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
}

message RequestPasswordResetResponse {}

message ConfirmPasswordResetRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
  string reset_token = 2 [
    (buf.validate.field).string.min_len = 32, // Примерная длина токена сброса
    (buf.validate.field).string.max_len = 64,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9_-]+$" // Токен может быть URL-safe base64
  ];
  string new_password = 3 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
}

message ConfirmPasswordResetResponse {}

message ChangePasswordRequest {
  string old_password = 1 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
  string new_password = 2 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
}

message ChangePasswordResponse {}

message LogoutRequest {
  string token = 1 [
    (buf.validate.field).string.min_len = 1
  ];
}

message LogoutResponse {}

message ValidateTokenRequest {
  string token = 1 [
    (buf.validate.field).string.min_len = 1
  ];
}

message ValidateTokenResponse {
  bool is_valid = 1;         // Флаг валидности токена
  int64 user_id = 2;         // ID пользователя
  string email = 3;          // Email пользователя
  int32 app_id = 4;          // ID приложения, для которого выдан токен
  repeated string roles = 5; // Роли пользователя
  repeated string permissions = 6; // Разрешения пользователя
  int64 expires_at = 7;      // Время истечения срока действия токена (Unix timestamp)
}