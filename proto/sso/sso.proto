syntax = "proto3";

package auth;

option go_package = "radahn.sso.v1;ssov1";

import "buf/validate/validate.proto";

service Auth {
  rpc Register (RegisterRequest) returns (RegisterResponse);
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse);
  rpc SetUserIsAdmin (SetUserIsAdminRequest) returns (SetUserIsAdminResponse);
  rpc SetUserIsNotAdmin (SetUserIsNotAdminRequest) returns (SetUserIsNotAdminResponse);

  // Запрашивает сброс пароля для пользователя. Отправляет токен сброса по email.
  rpc RequestPasswordReset (RequestPasswordResetRequest) returns (RequestPasswordResetResponse);
  // Подтверждает сброс пароля, используя токен сброса, и устанавливает новый пароль.
  rpc ConfirmPasswordReset (ConfirmPasswordResetRequest) returns (ConfirmPasswordResetResponse);

  // Позволяет авторизованному пользователю изменить свой пароль.
  rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse);

  // Завершает сессию пользователя, отзывая текущий JWT-токен.
  rpc Logout (LogoutRequest) returns (LogoutResponse);

  // Валидирует переданный JWT-токен и возвращает информацию о пользователе из токена.
  rpc ValidateToken (ValidateTokenRequest) returns (ValidateTokenResponse);
}

message RegisterRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
  string password = 2 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
}

message RegisterResponse {
  int64 user_id = 1;
}

message LoginRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
  string password = 2 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
  int32 app_id = 3 [
    (buf.validate.field).int32.gt = 0
  ];
}

message LoginResponse {
  string token = 1 [
    (buf.validate.field).string.min_len = 1
  ];
}

message IsAdminRequest {
  int64 user_id = 1 [
    (buf.validate.field).int64.gt = 0
  ];
}

message IsAdminResponse {
  bool is_admin = 1;
}

message SetUserIsAdminRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
}

message SetUserIsAdminResponse {
  int64 user_id = 1;
}

message SetUserIsNotAdminRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
}

message SetUserIsNotAdminResponse {
  int64 user_id = 1;
}

message RequestPasswordResetRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
}

message RequestPasswordResetResponse {}

message ConfirmPasswordResetRequest {
  string email = 1 [
    (buf.validate.field).string.email = true,
    (buf.validate.field).string.max_len = 255
  ];
  string reset_token = 2 [
    (buf.validate.field).string.min_len = 32,  // Примерная длина токена сброса
    (buf.validate.field).string.max_len = 64,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9_-]+$" // Токен может быть URL-safe base64
  ];
  string new_password = 3 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
}

message ConfirmPasswordResetResponse {}

message ChangePasswordRequest {
  string old_password = 1 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
  string new_password = 2 [
    (buf.validate.field).string.pattern = "^[\\x21-\\x7E]{8,32}$",
    (buf.validate.field).string.min_len = 8,
    (buf.validate.field).string.max_len = 32
  ];
}

message ChangePasswordResponse {}

message LogoutRequest {
  string token = 1 [
    (buf.validate.field).string.min_len = 1
  ];
}

message LogoutResponse {}

message ValidateTokenRequest {
  string token = 1 [
    (buf.validate.field).string.min_len = 1
  ];
}

message ValidateTokenResponse {
  bool is_valid = 1;         // Флаг валидности токена
  int64 user_id = 2;         // ID пользователя
  string email = 3;          // Email пользователя
  int32 app_id = 4;          // ID приложения, для которого выдан токен
  bool is_admin = 5;         // Статус администратора пользователя
  int64 expires_at = 6;      // Время истечения срока действия токена (Unix timestamp)
}