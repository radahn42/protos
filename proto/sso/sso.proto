syntax = "proto3";

package auth;

option go_package = "radahn.sso.v1;ssov1";

import "buf/validate/validate.proto";

service Auth {
  rpc Register (RegisterRequest) returns (RegisterResponse);
  rpc Login (LoginRequest) returns (LoginResponse);

  rpc RequestPasswordReset (RequestPasswordResetRequest) returns (RequestPasswordResetResponse);
  rpc ConfirmPasswordReset (ConfirmPasswordResetRequest) returns (ConfirmPasswordResetResponse);
  rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse);
  rpc Logout (LogoutRequest) returns (LogoutResponse);

  rpc AssignRoleToUser (AssignRoleToUserRequest) returns (AssignRoleToUserResponse);
  rpc RevokeRoleFromUser (RevokeRoleFromUserRequest) returns (RevokeRoleFromUserResponse);
  rpc GetUserRoles (GetUserRolesRequest) returns (GetUserRolesResponse);
  rpc GetAllRoles (GetAllRolesRequest) returns (GetAllRolesResponse);
  rpc CreateRole (CreateRoleRequest) returns (CreateRoleResponse);
  rpc DeleteRole (DeleteRoleRequest) returns (DeleteRoleResponse);
  rpc UpdateRole (UpdateRoleRequest) returns (UpdateRoleResponse);

  rpc HasPermission (HasPermissionRequest) returns (HasPermissionResponse);
  rpc GetUserPermissions (GetUserPermissionsRequest) returns (GetUserPermissionsResponse);
  rpc CreatePermission (CreatePermissionRequest) returns (CreatePermissionResponse);
  rpc DeletePermission (DeletePermissionRequest) returns (DeletePermissionResponse);
  rpc UpdatePermission (UpdatePermissionRequest) returns (UpdatePermissionResponse);
  rpc GetPermissionByID (GetPermissionByIDRequest) returns (GetPermissionByIDResponse);
  rpc GetPermissionByName (GetPermissionByNameRequest) returns (GetPermissionByNameResponse);
  rpc GetAllPermissions (GetAllPermissionsRequest) returns (GetAllPermissionsResponse);
  rpc AddPermissionToRole (AddPermissionToRoleRequest) returns (AddPermissionToRoleResponse);
  rpc RemovePermissionFromRole (RemovePermissionFromRoleRequest) returns (RemovePermissionFromRoleResponse);
  rpc GetRolePermissions (GetRolePermissionsRequest) returns (GetRolePermissionsResponse);
}

// --- User Authentication Messages ---

message RegisterRequest {
  string email = 1 [(buf.validate.field).string.email = true];
  string password = 2 [(buf.validate.field).string.min_bytes = 6];
}

message RegisterResponse {
  int64 user_id = 1;
}

message LoginRequest {
  string email = 1 [(buf.validate.field).string.email = true];
  string password = 2 [(buf.validate.field).string.min_bytes = 6];
  int32 app_id = 3;
}

message LoginResponse {
  string token = 1;
}

message RequestPasswordResetRequest {
  string email = 1 [(buf.validate.field).string.email = true];
}

message RequestPasswordResetResponse {}

message ConfirmPasswordResetRequest {
  string email = 1 [(buf.validate.field).string.email = true];
  string reset_token = 2 [(buf.validate.field).string.min_bytes = 1];
  string new_password = 3 [(buf.validate.field).string.min_bytes = 6];
}

message ConfirmPasswordResetResponse {}

message ChangePasswordRequest {
  int64 user_id = 1; // Potentially removed if user ID is derived from context/token
  string old_password = 2 [(buf.validate.field).string.min_bytes = 6];
  string new_password = 3 [(buf.validate.field).string.min_bytes = 6];
}

message ChangePasswordResponse {}

message LogoutRequest {
  string token = 1 [(buf.validate.field).string.min_bytes = 1];
}

message LogoutResponse {}

// --- Role Management Messages ---

message AssignRoleToUserRequest {
  int64 user_id = 1;
  int64 role_id = 2;
}

message AssignRoleToUserResponse {}

message RevokeRoleFromUserRequest {
  int64 user_id = 1;
  int64 role_id = 2;
}

message RevokeRoleFromUserResponse {}

message GetUserRolesRequest {
  int64 user_id = 1;
}

message GetUserRolesResponse {
  repeated Role roles = 1;
}

message GetAllRolesRequest {}

message GetAllRolesResponse {
  repeated Role roles = 1;
}

message CreateRoleRequest {
  string name = 1 [(buf.validate.field).string.min_bytes = 1];
  string description = 2;
}

message CreateRoleResponse {
  int64 role_id = 1;
}

message DeleteRoleRequest {
  int64 role_id = 1;
}

message DeleteRoleResponse {}

message UpdateRoleRequest {
  int64 role_id = 1;
  string name = 2;
  string description = 3;
}

message UpdateRoleResponse {}


// --- Permission Management Messages ---

message CreatePermissionRequest {
  string name = 1 [(buf.validate.field).string.min_bytes = 1];
  string description = 2;
}

message CreatePermissionResponse {
  int64 permission_id = 1;
}

message DeletePermissionRequest {
  int64 permission_id = 1;
}

message DeletePermissionResponse {}

message UpdatePermissionRequest {
  int64 permission_id = 1;
  string name = 2;
  string description = 3;
}

message UpdatePermissionResponse {}

message GetPermissionByIDRequest {
  int64 permission_id = 1;
}

message GetPermissionByIDResponse {
  Permission permission = 1;
}

message GetPermissionByNameRequest {
  string name = 1 [(buf.validate.field).string.min_bytes = 1];
}

message GetPermissionByNameResponse {
  Permission permission = 1;
}

message GetAllPermissionsRequest {}

message GetAllPermissionsResponse {
  repeated Permission permissions = 1;
}

message AddPermissionToRoleRequest {
  int64 role_id = 1;
  int64 permission_id = 2;
}

message AddPermissionToRoleResponse {}

message RemovePermissionFromRoleRequest {
  int64 role_id = 1;
  int64 permission_id = 2;
}

message RemovePermissionFromRoleResponse {}

message GetRolePermissionsRequest {
  int64 role_id = 1;
}

message GetRolePermissionsResponse {
  repeated Permission permissions = 1;
}

message GetUserPermissionsRequest {
  int64 user_id = 1;
}

message GetUserPermissionsResponse {
  repeated Permission permissions = 1;
}

message HasPermissionRequest {
  int64 user_id = 1;
  string permission_name = 2;
}

message HasPermissionResponse {
  bool has_permission = 1;
}

// --- Shared Models ---

message Role {
  int64 id = 1;
  string name = 2;
  string description = 3;
}

message Permission {
  int64 id = 1;
  string name = 2;
  string description = 3;
}